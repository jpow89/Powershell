# Ensure the PSWindowsUpdate module is installed
if (-not (Get-Module -ListAvailable -Name PSWindowsUpdate)) {
    Install-Module -Name PSWindowsUpdate -Force -SkipPublisherCheck
}

# Function to read JSON file
function Get-AffectedDrivers {
    param (
        [string]$jsonFilePath
    )
    
    $jsonContent = Get-Content -Path $jsonFilePath -Raw | ConvertFrom-Json
    $affectedDrivers = @{}

    foreach ($item in $jsonContent) {
        foreach ($version in $item.versions) {
            $productName = "$($item.vendor) $($item.product)"
            if (-not $affectedDrivers.ContainsKey($productName)) {
                $affectedDrivers[$productName] = @()
            }
            $affectedDrivers[$productName] += $version.lessThan
        }
    }
    
    return $affectedDrivers
}

# Path to the JSON file
$jsonFilePath = Join-Path -Path $PSScriptRoot -ChildPath "CVE-2024-30078.json"

# Check if JSON file exists
if (-Not (Test-Path -Path $jsonFilePath)) {
    Write-Error "JSON file not found at path: $jsonFilePath"
    exit
}

# Get the list of affected drivers from the JSON file
$affectedDrivers = Get-AffectedDrivers -jsonFilePath $jsonFilePath

# Get the list of Wi-Fi drivers
$drivers = Get-WmiObject Win32_PnPSignedDriver | Where-Object {
    $_.DeviceClass -eq "Net" -and $_.FriendlyName -match "Wi-Fi"
} | Select-Object -Property FriendlyName, DriverVersion, Manufacturer, DeviceID, DriverProviderName, DriverDate, DeviceClass -Unique

# Create a list to store driver status
$driverStatusList = @()

# Check each driver version
foreach ($driver in $drivers) {
    $driverVersion = $driver.DriverVersion
    $driverName = $driver.FriendlyName
    $isAffected = $false

    foreach ($productName in $affectedDrivers.Keys) {
        if ($affectedDrivers[$productName] -contains $driverVersion) {
            $isAffected = $true
            break
        }
    }

    $status = if ($isAffected) { "Affected" } else { "Not Affected" }

    $driverStatusList += [PSCustomObject]@{
        Name        = $driverName
        Version     = $driverVersion
        Status      = $status
        Manufacturer = $driver.Manufacturer
        DeviceID    = $driver.DeviceID
        Provider    = $driver.DriverProviderName
        DriverDate  = $driver.DriverDate
        DeviceClass = $driver.DeviceClass
    }
}

# Display all drivers and their status
$driverStatusList | Format-Table -AutoSize

# Attempt to update affected drivers and handle unsuccessful updates
foreach ($driverStatus in $driverStatusList) {
    if ($driverStatus.Status -eq "Affected") {
        Write-Output "Checking for updates for $($driverStatus.Name)..."
        try {
            Install-WindowsUpdate -DriverID $driverStatus.DeviceID -AcceptAll -AutoReboot -ErrorAction Stop
            Write-Output "Driver update successful for $($driverStatus.Name)"
        } catch {
            Write-Output "Driver update unsuccessful for $($driverStatus.Name)"
            Write-Output "Driver Details:"
            Write-Output "Name: $($driverStatus.Name)"
            Write-Output "Version: $($driverStatus.Version)"
            Write-Output "Manufacturer: $($driverStatus.Manufacturer)"
            Write-Output "Device ID: $($driverStatus.DeviceID)"
            Write-Output "Provider: $($driverStatus.Provider)"
            Write-Output "Driver Date: $($driverStatus.DriverDate)"
            Write-Output "Class: $($driverStatus.DeviceClass)"

            # Provide guidance for manual update
            Write-Output "Manual Update Instructions:"
            Write-Output "1. Visit the hardware manufacturer's website."
            Write-Output "2. Search for the latest driver for $($driverStatus.Name) or the Device ID $($driverStatus.DeviceID)."
            Write-Output "3. Download and install the latest driver following the instructions on the website."
        }
    }
}
